diff -u -b -r ./kit/editor/panel/inspector/editors/FxIdEditor.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/editors/FxIdEditor.java
--- ./kit/editor/panel/inspector/editors/FxIdEditor.java	2019-02-19 15:47:33.827902400 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/editors/FxIdEditor.java	2019-01-15 12:56:12.820643400 +0100
@@ -50,14 +50,6 @@
     private static final String DEFAULT_VALUE = null;
     private EditorController editorController;
 
-    public FxIdEditor(List<String> suggestedFxIds, EditorController editorController) {
-        super(PROPERTY_NAME, DEFAULT_VALUE, suggestedFxIds); //NOI18N
-        initialize(editorController);
-    }
-    
-    private void initialize(EditorController editorController) {
-        this.editorController = editorController;
-
         // text field events handling
         EventHandler<ActionEvent> onActionListener = event -> {
             if (isHandlingError()) {
@@ -85,6 +77,14 @@
             userUpdateValueProperty((value == null || value.isEmpty()) ? null : value);
             textField.selectAll();
         };
+
+    public FxIdEditor(List<String> suggestedFxIds, EditorController editorController) {
+        super(PROPERTY_NAME, DEFAULT_VALUE, suggestedFxIds); //NOI18N
+        initialize(editorController);
+    }
+    
+    private void initialize(EditorController editorController) {
+        this.editorController = editorController;
         setTextEditorBehavior(this, textField, onActionListener);
     }
 
diff -u -b -r ./kit/editor/panel/inspector/editors/StyleClassEditor.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/editors/StyleClassEditor.java
--- ./kit/editor/panel/inspector/editors/StyleClassEditor.java	2019-02-19 15:47:33.838910100 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/editors/StyleClassEditor.java	2019-01-15 12:56:12.832651500 +0100
@@ -78,6 +78,10 @@
     private List<String> themeClasses;
     private EditorController editorController;
 
+    private ChangeListener<Theme> themeListener = (ov, t, t1) -> {
+    	themeClasses = CssInternal.getThemeStyleClasses(editorController.getTheme());
+    };
+
     public StyleClassEditor(ValuePropertyMetadata propMeta, Set<Class<?>> selectedClasses,
             Set<FXOMInstance> selectedInstances, EditorController editorController) {
         super(propMeta, selectedClasses);
@@ -92,7 +96,7 @@
         addItem(getNewStyleClassItem());
 
         // On Theme change, update the themeClasses
-        editorController.themeProperty().addListener((ChangeListener<Theme>) (ov, t, t1) -> themeClasses = CssInternal.getThemeStyleClasses(StyleClassEditor.this.editorController.getTheme()));
+        editorController.themeProperty().addListener(themeListener);
     }
 
     private StyleClassItem getNewStyleClassItem() {
@@ -178,7 +182,12 @@
             Set<FXOMInstance> selectedInstances, EditorController editorController) {
         super.reset(propMeta, selectedClasses);
         this.selectedInstances = selectedInstances;
+        EditorController oldEditorController = this.editorController;
+        if (oldEditorController != editorController) {
+        	oldEditorController.themeProperty().removeListener(themeListener);
         this.editorController = editorController;
+        	editorController.themeProperty().addListener(themeListener);
+        }
         cssClassesMap = null;
         // add an empty item
         addItem(getNewStyleClassItem());
diff -u -b -r ./kit/editor/panel/inspector/InspectorPanelController.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/InspectorPanelController.java
--- ./kit/editor/panel/inspector/InspectorPanelController.java	2019-03-06 15:54:03.487093300 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/InspectorPanelController.java	2019-01-15 12:56:12.803630600 +0100
@@ -218,19 +218,21 @@
 
     // Inspector state
     private SelectionState selectionState;
-    private final EditorController editorController;
 
     private double searchResultDividerPosition;
 
     // Charsets for the properties of included elements
     private Map<String, Charset> availableCharsets;
 
+    private ChangeListener<Number> glossaryRevisionListener = (ov, t, t1) -> {
+    	updateInspector();
+    };
+
     /*
      * Public
      */
     public InspectorPanelController(EditorController editorController) {
         super(InspectorPanelController.class.getResource(fxmlFile), I18N.getBundle(), editorController);
-        this.editorController = editorController;
         this.availableCharsets = CharsetEditor.getStandardCharsets();
         viewModeProperty.setValue(ViewMode.SECTION);
         viewModeProperty.addListener(new ChangeListener<ViewMode>() {
@@ -521,6 +523,8 @@
         // Listen the Scene stylesheets changes
         getEditorController().sceneStyleSheetProperty().addListener((ChangeListener<ObservableList<File>>) (ov, t, t1) -> updateInspector());
         
+        getEditorController().getGlossary().revisionProperty().addListener(glossaryRevisionListener);
+        
         selectionState = new SelectionState(editorController);
         viewModeChanged(null, getViewMode());
         expandedSectionChanged();
@@ -536,11 +540,17 @@
         searchPatternDidChange();
     }
 
+    @Override
+    protected void editorControllerChanged(EditorController oldController, EditorController newController) {
+		oldController.getGlossary().revisionProperty().removeListener(glossaryRevisionListener);
+    	newController.getGlossary().revisionProperty().addListener(glossaryRevisionListener);
+    }
+
     /*
      * Private
      */
     private void updateInspector() {
-        if (isInspectorLoaded() && hasFxomDocument()) {
+        if (isInspectorLoaded()) {
             SelectionState newSelectionState = new SelectionState(editorController);
             if (isInspectorStateChanged(newSelectionState) || isEditedMode()) {
                 selectionState = newSelectionState;
@@ -1878,7 +1888,7 @@
             }
         } else if (editorClass == EffectPopupEditor.class) {
             if (createdPropertyEditor != null) {
-                ((EffectPopupEditor) createdPropertyEditor).reset(propMeta, selectedClasses);
+                ((EffectPopupEditor) createdPropertyEditor).reset(propMeta, selectedClasses, getEditorController());
             } else {
                 createdPropertyEditor = new EffectPopupEditor(propMeta, selectedClasses, getEditorController());
             }
@@ -1890,7 +1900,7 @@
             }
         } else if (editorClass == PaintPopupEditor.class) {
             if (createdPropertyEditor != null) {
-                ((PaintPopupEditor) createdPropertyEditor).reset(propMeta, selectedClasses);
+                ((PaintPopupEditor) createdPropertyEditor).reset(propMeta, selectedClasses, getEditorController());
             } else {
                 createdPropertyEditor = new PaintPopupEditor(propMeta, selectedClasses, getEditorController());
             }
diff -u -b -r ./kit/editor/panel/inspector/popupeditors/EffectPopupEditor.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/EffectPopupEditor.java
--- ./kit/editor/panel/inspector/popupeditors/EffectPopupEditor.java	2019-02-19 15:47:33.845915300 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/EffectPopupEditor.java	2019-03-08 17:47:48.861737700 +0100
@@ -88,6 +88,12 @@
         this.editorController = editorController;
     }
 
+    public void reset(ValuePropertyMetadata propMeta, Set<Class<?>> selectedClasses,
+    		EditorController editorController) {
+    	super.reset(propMeta, selectedClasses);
+    	this.editorController = editorController;
+    }
+
     @Override
     public void setPopupContentValue(Object value) {
         assert value == null || value instanceof Effect;
diff -u -b -r ./kit/editor/panel/inspector/popupeditors/FontPopupEditor.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/FontPopupEditor.java
--- ./kit/editor/panel/inspector/popupeditors/FontPopupEditor.java	2019-02-19 15:47:33.847921900 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/FontPopupEditor.java	2019-01-15 12:56:12.840673500 +0100
@@ -126,6 +126,12 @@
     public void reset(ValuePropertyMetadata propMeta, Set<Class<?>> selectedClasses, EditorController editorController) {
         super.reset(propMeta, selectedClasses);
         this.editorController = editorController;
+        if (familyEditor != null) {
+        	familyEditor.setEditorController(editorController);
+        }
+        if (styleEditor != null) {
+        	styleEditor.setEditorController(editorController);
+        }
     }
 
     //
@@ -209,14 +215,8 @@
 
         private List<String> families;
         private String family = null;
+        private EditorController editorController;
 
-        public FamilyEditor(String name, String defaultValue, List<String> families, EditorController editorController) {
-            super(name, defaultValue, families);
-            initialize(families, editorController);
-        }
-        
-        private void initialize(List<String> families, EditorController editorController) {
-            this.families = families;
             EventHandler<ActionEvent> onActionListener = event -> {
                 if (Objects.equals(family, getTextField().getText())) {
                     // no change
@@ -232,10 +232,22 @@
                 valueProperty().setValue(family);
             };
 
+        public FamilyEditor(String name, String defaultValue, List<String> families, EditorController editorController) {
+            super(name, defaultValue, families);
+            initialize(families, editorController);
+        }
+        
+        private void initialize(List<String> families, EditorController editorController) {
+            this.families = families;
+            this.editorController = editorController;
             setTextEditorBehavior(this, getTextField(), onActionListener);
             commitOnFocusLost(this);
         }
 
+        public void setEditorController(EditorController editorController) {
+        	this.editorController = editorController;
+        }
+
         @Override
         public Object getValue() {
             return getTextField().getText();
@@ -250,13 +262,8 @@
     private static class StyleEditor extends AutoSuggestEditor {
         
         private String style = null;
+        private EditorController editorController;
 
-        public StyleEditor(String name, String defaultValue, List<String> suggestedList, EditorController editorController) {
-            super(name, defaultValue, suggestedList);
-            initialize(editorController);
-        }
-        
-        private void initialize(EditorController editorController) {
             EventHandler<ActionEvent> onActionListener = event -> {
                 if (Objects.equals(style, getTextField().getText())) {
                     // no change
@@ -271,10 +278,21 @@
                 valueProperty().setValue(style);
             };
 
+        public StyleEditor(String name, String defaultValue, List<String> suggestedList, EditorController editorController) {
+            super(name, defaultValue, suggestedList);
+            initialize(editorController);
+        }
+        
+        private void initialize(EditorController editorController) {
+        	this.editorController = editorController;
             setTextEditorBehavior(this, getTextField(), onActionListener);
             commitOnFocusLost(this);
         }
 
+        public void setEditorController(EditorController editorController) {
+			this.editorController = editorController;
+		}
+
         @Override
         public Object getValue() {
             return getTextField().getText();
diff -u -b -r ./kit/editor/panel/inspector/popupeditors/PaintPopupEditor.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/PaintPopupEditor.java
--- ./kit/editor/panel/inspector/popupeditors/PaintPopupEditor.java	2019-03-06 15:54:03.492079500 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/inspector/popupeditors/PaintPopupEditor.java	2019-01-15 12:56:12.841658000 +0100
@@ -92,6 +92,12 @@
         paintPicker = new PaintPicker(delegate);
     }
 
+    public void reset(ValuePropertyMetadata propMeta, Set<Class<?>> selectedClasses,
+    		EditorController editorController) {
+    	super.reset(propMeta, selectedClasses);
+    	this.editorController = editorController;
+    }
+
     @Override
     public String getPreviewString(Object value) {
         if (value == null) {
diff -u -b -r ./kit/editor/panel/util/AbstractPanelController.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/util/AbstractPanelController.java
--- ./kit/editor/panel/util/AbstractPanelController.java	2019-02-19 15:47:33.879186700 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/kit/editor/panel/util/AbstractPanelController.java	2019-01-15 12:56:12.877742100 +0100
@@ -65,7 +65,7 @@
     
     private static final Logger LOG = Logger.getLogger(AbstractPanelController.class.getName());
     
-    private final EditorController editorController;
+    protected EditorController editorController;
     private Parent panelRoot;
     
     /**
@@ -76,31 +76,7 @@
      * @param c the editor controller (should not be null).
      */
     protected AbstractPanelController(EditorController c) {
-        assert c != null;
-        this.editorController = c;
-        startListeningToEditorSelection();
-        startListeningToJobManagerRevision();
-        editorController.fxomDocumentProperty().addListener((ChangeListener<FXOMDocument>) (ov, od, nd) -> {
-            assert editorController.getFxomDocument() == nd;
-            if (od != null) {
-                od.sceneGraphRevisionProperty().removeListener(fxomDocumentRevisionListener);
-                od.cssRevisionProperty().removeListener(cssRevisionListener);
-            }
-            try {
-                fxomDocumentDidChange(od);
-            } catch(RuntimeException x) {
-                LOG.log(Level.SEVERE, "Bug", x); //NOI18N
-            }
-            if (nd != null) {
-                nd.sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);
-                nd.cssRevisionProperty().addListener(cssRevisionListener);
-            }
-        });
-        if (editorController.getFxomDocument() != null) {
-            editorController.getFxomDocument().sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);
-            editorController.getFxomDocument().cssRevisionProperty().addListener(cssRevisionListener);
-        }
-        editorController.toolStylesheetProperty().addListener((ChangeListener<String>) (ov, od, nd) -> toolStylesheetDidChange(od));
+        setEditorController(c);
     }
     
     /**
@@ -112,6 +88,46 @@
         return editorController;
     }
     
+    public void setEditorController(EditorController editorController) {
+    	assert editorController != null;
+    	EditorController old = this.editorController;
+    	if (old == editorController) {
+    		return;
+    	}
+    	
+    	if (old != null) {
+    		stopListeningToEditorSelection();
+    		stopListeningToJobManagerRevision();
+    		stopListeningToFxomDocumentChange();
+    		stopListeningToToolStylesheet();
+    		
+    		if (old.getFxomDocument() != null) {
+    			stopListeningToFxomDocumentSceneGraphRevision();
+    			stopListeningToFxomDocumentCssRevision();
+    		}
+    	}
+    	
+    	this.editorController = editorController;
+    	startListeningToEditorSelection();
+    	startListeningToJobManagerRevision();
+    	startListeningToFxomDocumentChange();
+    	startListeningToToolStylesheet();
+    	
+    	if (editorController.getFxomDocument() != null) {
+    		startListeningToFxomDocumentSceneGraphRevision();
+    		startListeningToFxomDocumentCssRevision();
+    	}
+    	
+    	if (old != null) {
+    		editorSelectionDidChange();
+        	editorControllerChanged(old, editorController);
+    	}
+    }
+    
+    protected void editorControllerChanged(EditorController oldController, EditorController newController) {
+    	
+    }
+    
     /**
      * Returns the root FX object of this panel.
      * When called the first time, this method invokes {@link #makePanel()}
@@ -235,6 +251,33 @@
         }
     };
     
+    private final ChangeListener<FXOMDocument> fxomDocumentChangeListener
+    		= (observable, od, nd) -> {
+    	assert editorController.getFxomDocument() == nd;
+    	if (od != null) {
+    		od.sceneGraphRevisionProperty().removeListener(fxomDocumentRevisionListener);
+    		od.cssRevisionProperty().removeListener(cssRevisionListener);
+    	}
+    	try {
+    		fxomDocumentDidChange(od);
+    	} catch(RuntimeException x) {
+    		LOG.log(Level.SEVERE, "Bug", x); //NOI18N
+    	}
+    	if (nd != null) {
+    		nd.sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);
+    		nd.cssRevisionProperty().addListener(cssRevisionListener);
+    	}
+    };
+    
+    private final ChangeListener<String> toolStylesheetListener
+    		= (observable, oldValue, newValue) -> {
+    	try {
+    		toolStylesheetDidChange(newValue);
+    	} catch(RuntimeException x) {
+    		LOG.log(Level.SEVERE, "Bug", x); //NOI18N
+    	}
+    };
+    
     /**
      * Setup a listener which invokes {@link #editorSelectionDidChange} each
      * time the editor controller changes the selected objects.
@@ -283,6 +326,37 @@
         editorController.getJobManager().revisionProperty().removeListener(jobManagerRevisionListener);
     }
     
+    protected final void startListeningToFxomDocumentChange() {
+    	editorController.fxomDocumentProperty().addListener(fxomDocumentChangeListener);
+    }
+    
+    protected final void stopListeningToFxomDocumentChange() {
+    	editorController.fxomDocumentProperty().removeListener(fxomDocumentChangeListener);
+    }
+    
+    protected final void startListeningToToolStylesheet() {
+    	editorController.toolStylesheetProperty().addListener(toolStylesheetListener);
+    }
+    
+    protected final void stopListeningToToolStylesheet() {
+    	editorController.toolStylesheetProperty().removeListener(toolStylesheetListener);
+    }
+    
+    protected final void startListeningToFxomDocumentSceneGraphRevision() {
+    	editorController.getFxomDocument().sceneGraphRevisionProperty().addListener(fxomDocumentRevisionListener);
+    }
+    
+    protected final void stopListeningToFxomDocumentSceneGraphRevision() {
+    	editorController.getFxomDocument().sceneGraphRevisionProperty().removeListener(fxomDocumentRevisionListener);
+    }
+    
+    protected final void startListeningToFxomDocumentCssRevision() {
+    	editorController.getFxomDocument().cssRevisionProperty().addListener(cssRevisionListener);
+    }
+    
+    protected final void stopListeningToFxomDocumentCssRevision() {
+    	editorController.getFxomDocument().cssRevisionProperty().removeListener(cssRevisionListener);
+    }
     
     /**
      * Replaces oldStylesheet by the tool style sheet assigned to the editor
diff -u -b -r ./app/info/InfoPanelController.java ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/app/info/InfoPanelController.java
--- ./app/info/InfoPanelController.java	2019-02-19 15:47:33.518234200 +0100
+++ ../../../../../../../../../scene-builder-plugin/sb/src/main/java/com/oracle/javafx/scenebuilder/app/info/InfoPanelController.java	2019-01-15 12:56:12.549940900 +0100
@@ -216,6 +216,10 @@
             }
         });
 
+        getEditorController().getGlossary().revisionProperty().addListener((ov, t, t1) -> {
+        	resetSuggestedControllerClasses(getEditorController().getFxmlLocation());
+        });
+
         leftTableColumn.setCellValueFactory(new PropertyValueFactory<>("key")); //NOI18N
         rightTableColumn.setCellValueFactory(new PropertyValueFactory<>("fxomObject")); //NOI18N
         leftTableColumn.setCellFactory(new LeftCell.Factory());
	  